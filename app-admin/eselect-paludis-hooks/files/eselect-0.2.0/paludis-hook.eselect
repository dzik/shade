#!/bin/bash
# Copyright 2006 Ciaran McCreesh
# Distributed under the terms of the GNU General Public License v2
# $Id: $

DESCRIPTION="Paludis hooks management"
MAINTAINER="zxy"
SVN_DATE='$Date: $'
VERSION=0.1

e_dir="${ROOT}/usr/share/paludis/hooks/eselect/"	
phooksdir="${ROOT}/usr/share/paludis/hooks"
db_dir="${e_dir}.db/"

get_hooks() {
	local hook

	ls -1 ${e_dir} 
}

### database management ###

is_enabled() {
	local f="${db_dir}${1}"
 	if [ -e ${f} ] ; then echo true
 			else echo false
 	fi
}

# db_mkdb() {
# 	mkdir -p ${db_dir}
# }

db_enable() {
	touch ${db_dir}${1}
}

db_disable() {
	rm ${db_dir}${1}
}


### list action ###

describe_list() {
	echo "List hooks managable by eselect"
}

do_list() {
	hooks=( $(get_hooks ) )
	write_list_start "Managable hooks:"
	if [[ -n ${hooks[@]} ]] ; then
		local hook
		local status
		for hook in ${hooks[@]} ; do
			if [ `is_enabled ${hook}` == true ] ; 
				then status="enabled"
				else status="disabled"
			fi
			write_kv_list_entry "${hook}" "${status}"
		done
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### enable action ###

describe_enable() {
	echo "Enable a hook"
}

describe_enable_parameters() {
	echo "<target>"
}

describe_enable_options() {
	echo "target : A hook name (from 'list' action) or 'all', to enable all hooks"
}

symlink_file() {
	local hookfile="${1}"
        local hookname="${hookfile##*/}"
	local scriptdir="${hookfile%/*}/"
        local phd
        shift
	
	for hooktype in "$@"; do
		phd=${phooksdir}/${hooktype}
		if [ -e ${phd} ] ; then
			if [ -e "${phooksdir}/${hookfile}" ] ; then
				write_kv_list_entry "...${hookfile}  >  ${hooktype}"
				cd ${phooksdir}/${hooktype}
				ln -sf  ${phooksdir}/${hookfile} ${hookname}
			else
				echo "  !! ${phooksdir}${hookfile} ... doesn't exist"
			fi
		else
			echo "  !! ${phd} ... doesn't exist"
		fi
	done
}

do_enable() {
	[[ -z ${1} ]] && die -q "You didn't tell me what you want to enable"

 	local i hooks hookfile hooksymlink 
 	
 	
 	
	if [ ${1} == "all" ] ; then
		hooks=( $(get_hooks ) )
		[[ -z ${hooks} ]] && die -q "no available hooks ..."
		for i in "${hooks[@]}" ; do
			do_enable "${i}"
		done
		return
	else
		[[ -e ${e_dir}${1} ]] || die -q "unknown hook ${1}"
		write_list_start "enabling ${1} ..." 
		while read -r hookfile i ; do
			if [ "${hookfile:0:1}" != "#"  -a  "${hookfile}" != "" ]; then
				symlink_file ${hookfile} ${i}
			fi
 		done < ${e_dir}${1}
		db_enable ${1}
		return
	fi

}

### disable action ###

describe_disable() {
	echo "Disable a hook - remove symlinks"
}

describe_disable_parameters() {
	echo "<target>"
}

describe_disable_options() {
	echo "target : A hook name (from 'list' action) or 'all', to disable all hooks"
}

unsymlink_file() {
	local hookfile="${1}"
        local hookname="${hookfile##*/}"
        local phf
        shift
	

	for hooktype in "$@"; do
		phf=${phooksdir}/${hooktype}/${hookname}
		if [ -e ${phf} ] ; then
			write_kv_list_entry "<< ${hooktype}/${hookname}"
			rm ${phf}
		else
			echo "  !! "${hooktype}"/"${hookname}" ... doesn't exist"
		fi
	done
}

do_disable() {
	[[ -z ${1} ]] && die -q "You didn't tell me what you want to disable"

 	local i hooks hookfile hooksymlink 
 	
 	
 	
	if [ ${1} == "all" ] ; then
		hooks=( $(get_hooks ) )
		[[ -z ${hooks} ]] && die -q "no available hooks ..."
		for i in "${hooks[@]}" ; do
			do_disable "${i}"
		done
		return
	else
		[[ -e ${e_dir}${1} ]] || die -q "unknown hook ${1}"
		write_list_start "disabling ${1} ..."

		while read -r hookfile i ; do
			if [ "${hookfile:0:1}" != "#"  -a  "${hookfile}" != "" ]; then
				unsymlink_file ${hookfile} ${i}
			fi
 		done < ${e_dir}${1}
		db_disable ${1}
		return
	fi

}



### check action ###

describe_check() {
	echo "Check a hook's symlinks"
}

describe_check_parameters() {
	echo "<target>"
}

describe_check_options() {
	echo "target : A hook name (from 'list' action) or 'all', to check all hooks"
}

check_hook() {
	local hook="${1}"
	shift
	local hookfile="${1}"
        local hookname="${hookfile##*/}"
        local phf
	local line
	local hk_enabled
        shift

	hk_enabled=`is_enabled ${hook}`
	if [ ${hk_enabled} == false ] ; then	
		write_kv_list_entry "${hookname}  is not enabled."
		write_kv_list_entry "Checking stale links:"
	else
		write_kv_list_entry "${hookname}  should be linked to:"
		
	fi

	for hooktype in "$@"; do
		phf=${phooksdir}/${hooktype}/${hookname}
		line="    ${hooktype}/ ... "
		if [ -e ${phf} ] ; then
			if [ ${hk_enabled} == true ] ; then	
				echo "${line} OK"
			else
				echo "${line} symlink ${phf} still exists"
			fi
		else
			if [ ${hk_enabled} == true ] ; then	
				echo "${line} symlink ${phf} doesn't exist"
			else
				echo "${line} no symlink ... OK"
			fi
		fi
	done
	
}

do_check() {
	[[ -z ${1} ]] && die -q "You didn't tell me what you want to check"

	local i hooks hookfile hooksymlink 

	
	if [ ${1} == "all" ] ; then
		hooks=( $(get_hooks ) )
		[[ -z ${hooks} ]] && die -q "no available hooks ..."
		for i in "${hooks[@]}" ; do
			do_check "${i}"
		done
		return
	else
		[[ -e ${e_dir}${1} ]] || die -q "unknown hook ${1}"
		write_list_start "checking ${1} ..."

		while read -r hookfile i ; do
			if [ "${hookfile:0:1}" != "#"  -a  "${hookfile}" != "" ] ; then
				check_hook ${1} ${hookfile} ${i}
			fi
 		done < ${e_dir}${1}
		return
	fi

}
